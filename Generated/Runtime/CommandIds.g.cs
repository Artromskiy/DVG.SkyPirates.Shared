//------------------------------------------------------------------------------
// <auto-generated>
//
// This code was generated by a tool.
// Path: ..\..\..\Generators\CommandGenerator.cs
//
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// 
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using DVG.SkyPirates.Shared.Commands;

namespace DVG.Core.Commands
{
    public static class CommandIds
    {
        private static readonly Dictionary<Type, int> _typeToId;
        private static readonly Dictionary<int, Type> _idToType;

        static CommandIds()
        {
            _typeToId = new Dictionary<Type, int>()
            {
                {typeof(Fixation), 1},
                {typeof(Direction), 2},
                {typeof(Rotation), 3},
                {typeof(SpawnSquad), 4},
                {typeof(SpawnUnit), 5},
                {typeof(StartGame), 6},
            };
            
            _idToType = new Dictionary<int, Type>()
            {
                {1, typeof(Fixation)},
                {2, typeof(Direction)},
                {3, typeof(Rotation)},
                {4, typeof(SpawnSquad)},
                {5, typeof(SpawnUnit)},
                {6, typeof(StartGame)},
            };
        }

        
        public static void ForEachData<T>(T action)
            where T: IGenericAction<ICommandData>
        {
            action.Invoke<Fixation>();
            action.Invoke<Direction>();
            action.Invoke<Rotation>();
            action.Invoke<SpawnSquad>();
            action.Invoke<SpawnUnit>();
            action.Invoke<StartGame>();
        }

        public static int GetId<T>() => _typeToId[typeof(T)];
        public static Type GetCommand(ushort id) => _idToType[id];
    }
}

