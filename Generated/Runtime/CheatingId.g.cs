//------------------------------------------------------------------------------
// <auto-generated>
//
// This code was generated by a tool.
// Path: ..\..\..\Generators\StringIdGenerator.cs
//
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// 
// </auto-generated>
//------------------------------------------------------------------------------

using DVG.Core.Ids.Utilities;
using System.ComponentModel;
using System;
using Newtonsoft.Json;
using DVG.Core;

namespace DVG.SkyPirates.Shared.Ids
{
    [TypeConverter(typeof(IdTypeConverter))]
    [JsonConverter(typeof(IdJsonConverter))]
    [Serializable]
    partial struct CheatingId : IStringId, IEquatable<CheatingId>, IComparable<CheatingId>
    {
        public readonly string value;
        string IStringId.Value => value;
        private const string NoneValue = "None";
        public static readonly CheatingId None = new CheatingId(NoneValue);

        public CheatingId(string value)
        {
            this.value = value;
        }

        public readonly bool IsNone => string.IsNullOrEmpty(value) || value == NoneValue;
        public readonly bool Equals(CheatingId other) => value == other.value;
        public readonly int CompareTo(CheatingId other) => Equals(other) ? 0 : string.Compare(value, other.value);
        public override readonly bool Equals(object obj) => obj is CheatingId other && Equals(other);
        public override readonly string ToString() => value;
        public override readonly int GetHashCode() => IsNone ? 0 : value.GetHashCode();
        public static bool operator ==(CheatingId a, CheatingId b) => a.value == b.value || (a.IsNone && b.IsNone);
        public static bool operator !=(CheatingId a, CheatingId b) => !(a == b);

        public static implicit operator string(CheatingId id) => id.value;

        private class IdTypeConverter : IdTypeConverter<CheatingId>
        {
            protected override CheatingId CreateFromSource(string srcData) => new CheatingId(srcData);
        }

        private class IdJsonConverter : IdJsonConverter<CheatingId>
        {
            protected override CheatingId CreateFromRawData(string type) => new CheatingId(type);
        }
    }
}
