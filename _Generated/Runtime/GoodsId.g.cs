//------------------------------------------------------------------------------
// <auto-generated>
//
// This code was generated by a tool.
// Path: ..\..\..\Generators\StringIdGenerator.cs
//
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// 
// </auto-generated>
//------------------------------------------------------------------------------

using DVG.Core.Ids.Utilities;
using System.ComponentModel;
using System;
using Newtonsoft.Json;
using DVG.Core;

namespace DVG.SkyPirates.Shared.Ids
{
    [TypeConverter(typeof(IdTypeConverter))]
    [JsonConverter(typeof(IdJsonConverter))]
    [Serializable]
    partial struct GoodsId : IId, IEquatable<GoodsId>, IComparable<GoodsId>
    {
        public string Value { get; private set; }
        private const string NoneValue = "None";
        public static readonly GoodsId None = new GoodsId(NoneValue);

        public GoodsId(string Value)
        {
            this.Value = Value;
        }

        public readonly bool IsNone => string.IsNullOrEmpty(Value) || Value == NoneValue;
        public readonly bool Equals(GoodsId other) => Value == other.Value || (IsNone && other.IsNone);
        public readonly int CompareTo(GoodsId other) => Equals(other) ? 0 : string.Compare(Value, other.Value);
        public override readonly bool Equals(object obj) => obj is GoodsId other && Equals(other);
        public override readonly string ToString() => Value;
        public override readonly int GetHashCode() => IsNone ? 0 : Value.GetHashCode();
        public static bool operator ==(GoodsId a, GoodsId b) => a.Value == b.Value || (a.IsNone && b.IsNone);
        public static bool operator !=(GoodsId a, GoodsId b) => !(a == b);

        public static implicit operator string(GoodsId id) => id.Value;

        private class IdTypeConverter : IdTypeConverter<GoodsId>
        {
            protected override GoodsId CreateFromSource(string srcData) => new GoodsId(srcData);
        }

        private class IdJsonConverter : IdJsonConverter<GoodsId>
        {
            protected override GoodsId CreateFromRawData(string type) => new GoodsId(type);
        }
    }
}
