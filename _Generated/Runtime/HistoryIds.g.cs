//------------------------------------------------------------------------------
// <auto-generated>
//
// This code was generated by a tool.
// Path: ..\..\..\Generators\HistoryGenerator.cs
//
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// 
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using DVG.SkyPirates.Shared.Components.Data;
using DVG.SkyPirates.Shared.Components;

namespace DVG.Core.History
{
    public static class HistoryIds
    {
        private static readonly Dictionary<Type, int> _typeToId;
        private static readonly Dictionary<int, Type> _idToType;

        static HistoryIds()
        {
            _typeToId = new Dictionary<Type, int>()
            {
                {typeof(Damage), 1},
                {typeof(Destination), 2},
                {typeof(Direction), 3},
                {typeof(Fixation), 4},
                {typeof(Health), 5},
                {typeof(ImpactDistance), 6},
                {typeof(MoveSpeed), 7},
                {typeof(Position), 8},
                {typeof(Rotation), 9},
                {typeof(Squad), 10},
                {typeof(Target), 11},
                {typeof(TargetSearchData), 12},
                {typeof(Team), 13},
            };
            
            _idToType = new Dictionary<int, Type>()
            {
                {1, typeof(Damage)},
                {2, typeof(Destination)},
                {3, typeof(Direction)},
                {4, typeof(Fixation)},
                {5, typeof(Health)},
                {6, typeof(ImpactDistance)},
                {7, typeof(MoveSpeed)},
                {8, typeof(Position)},
                {9, typeof(Rotation)},
                {10, typeof(Squad)},
                {11, typeof(Target)},
                {12, typeof(TargetSearchData)},
                {13, typeof(Team)},
            };
        }

        
        public static void ForEachData<T>(T action)
            where T: IStructGenericAction
        {
            action.Invoke<Damage>();
            action.Invoke<Destination>();
            action.Invoke<Direction>();
            action.Invoke<Fixation>();
            action.Invoke<Health>();
            action.Invoke<ImpactDistance>();
            action.Invoke<MoveSpeed>();
            action.Invoke<Position>();
            action.Invoke<Rotation>();
            action.Invoke<Squad>();
            action.Invoke<Target>();
            action.Invoke<TargetSearchData>();
            action.Invoke<Team>();
        }

        public static int GetId<T>() => _typeToId[typeof(T)];
        public static Type GetCommand(ushort id) => _idToType[id];
    }
}

